{{> navbar}}
<div class="container page-wrap">
  <div class="row">
    <div class="col-md-8 col-md-offset-2">
      <br>
      <form id="device-search-form" action="/devices" method="post">
        <div class="text-right">
          <span id="tsLabel" class="text-muted">THINGSPACE&nbsp</span>
          <input id="toggle-event" name="dataSource" type="checkbox"  checked data-toggle="toggle"
                                                                      data-size="mini"
                                                                      data-on="<"
                                                                      data-off=">"
                                                                      data-onstyle="danger"
                                                                      data-offstyle="info">
          <span id="blLabel" class="text-muted">&nbspBUG LABS</span>
        </div>
        <br><br>
        <div class="input-group">
          <input type="text" name="dweetName" class="form-control" placeholder="Search for devices...">
          <span class="input-group-btn">
            <button id="searchDevice" class="btn btn-default" type="submit">Go!</button>
          </span>
        </div>
      </form>
      <br><br>
        <div id="dweetDataContent">
          {{!-- Dweet Data Content Appended Here --}}
        </div>
    </div>
  </div>
</div>
<script type="text/javascript">
  'use strict';
  $(() => {
    let socket = io('{{host}}' + '/devicedata', {
      transports: ['websocket']
    });

    $('#device-search-form').submit((event) => {
      event.preventDefault();
    });

    // GET LATEST DWEET LOGIC
    $('#searchDevice').on('click', () => {
      let searchDeviceInput = $("input[name='dweetName']");
      let toggleInputValue = $('#toggle-event').is(":checked");
        if(searchDeviceInput.val() !== '') {
          socket.emit('getLatestDweet', { searchInput: searchDeviceInput.val(), toggleInput: toggleInputValue});
        }
      searchDeviceInput.val('')
    });

    // Event emitter for initial device content
    socket.on('deviceDweetContent', data => {
      let parsedDweet = JSON.parse(data);
      if (parsedDweet.error) {
        noDeviceFoundError();
      } else {
        deviceDataContent(parsedDweet);
      }
    });

    let noDeviceFoundError = () => {
      let dweetDataContentDiv = $('#dweetDataContent');
      let errorMsg =  `<div class="well well-sm">
                        <h5 class="text-muted">Uh oh! No device data found by that name...</h5>
                      </div>`
      dweetDataContentDiv.html('').append(errorMsg);
    }

    let deviceDataContent = (parseData) => {
      let dweetDataContentDiv = $('#dweetDataContent');
      // Get device name
      let dweetThingName = parseData.thing;
      // Get device content
      let dweetContent = parseData.content;
      // Socket data for raw well
      let jsonData = JSON.stringify(parseData, null, 2)
      // Get device timestamp
      let socketTimestamp = moment(parseData.created).format("MMMM Do YYYY, h:mm:ss a")
      // Device content list template
      let dweetValueList = prop => {
        return  `<li class="dweet-data-visual">
                  <div class="col-xs-4 dweet-key">
                    <p>${prop}:</p>
                  </div>
                  <div class="col-xs-8 text-right dweet-value">
                    <p class="lead">${dweetContent[prop]}</p>
                  </div>
                </li>`;
      }
      // Update device content list data
      let dweetValueListData = '';
      for(let prop in dweetContent) {
        dweetValueListData += dweetValueList(prop);
      }
      // Device content template
      let template = `<div class="container-fluid">
                        <div id="device-title-container" class="alert alert-info row">
                          <div class="col-xs-7">
                            <h1 class="device-title">${dweetThingName}</h1>
                            <p><small id="deviceTimestamp">Last updated on ${socketTimestamp}</small></p>
                          </div>
                          <div class="col-xs-5 text-right save-device-button">
                            <a href="#" class="btn btn-sm btn-warning device-save-button"><span class="glyphicon glyphicon-ok-circle"></span> Save Device</a>
                          </div>
                        </div>
                      </div>
                      <hr>
                      <div>
                        <!-- Nav tabs -->
                        <ul class="nav nav-tabs" role="tablist">
                          <li role="presentation" class="active"><a href="#visual" aria-controls="visual" role="tab" data-toggle="tab">Visual</a></li>
                          <li role="presentation" ><a href="#raw" aria-controls="raw" role="tab" data-toggle="tab">Raw</a></li>
                        </ul>
                        <!-- Tab panes -->
                        <div class="container-fluid">
                          <div class="tab-content device-well">
                            <div role="tabpanel" class="tab-pane fade in active" id="visual">
                              <div class="well well-lg row">
                                <ul id="socket-visual" class="list-group">
                                  ${dweetValueListData}
                                </ul>
                              </div>
                            </div>
                            <div role="tabpanel" class="tab-pane fade" id="raw">
                              <div id="socket-raw" class="well well-lg row">
                                <pre class="dweet-data-json">${jsonData}</pre>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>`
      // Append to body
      dweetDataContentDiv.html('').append(template);
    }

    // LISTEN FOR NEW DWEETS LOGIC
    socket.on('deviceDweetStream', data => {

      let parseData = JSON.parse(data);

      // Socket data for raw well
      let jsonData = JSON.stringify(parseData, null, 2)
      $('pre').replaceWith('<pre class="dweet-data-json">' + jsonData + '</pre>')

      let dweetContent = parseData.content
      // Socket data for visual well
      let socketTimestamp = moment({{parseData.created}}).format("MMMM Do YYYY, h:mm:ss a")
      $('small#deviceTimestamp').replaceWith(`<small id="deviceTimestamp">Last updated on ${socketTimestamp}</small>`);

      let dweetValueList = prop => {
        return  `<li class="dweet-data-visual">
                  <div class="col-xs-4 dweet-key">
                    <p>${prop}:</p>
                  </div>
                  <div class="col-xs-8 text-right dweet-value">
                    <p class="lead">${dweetContent[prop]}</p>
                  </div>
                </li>`;
      }
      let dweetValueListData = '';
      for(let prop in dweetContent) {
        dweetValueListData += dweetValueList(prop);
      }
      $('ul#socket-visual').replaceWith(`<ul id="socket-visual" class="list-group">${dweetValueListData}</ul>`);
    });



    // TOGGLE SWITCH LOGIC
    $(document).ready(keepClassy());

    $(function() {
      $('#toggle-event').change(function() {
        if($("#toggle-event").is(':checked')) {
          $("#tsLabel").removeClass('text-muted').addClass('text-danger');
          $("#blLabel").removeClass('text-info').addClass('text-muted');
          localStorage.setItem("keepTSClass", $('#tsLabel').hasClass('text-danger'));
          localStorage.removeItem("keepBLClass");
        } else {
          $("#blLabel").removeClass('text-muted').addClass('text-info');
          $("#tsLabel").removeClass('text-danger').addClass('text-muted');
          localStorage.setItem("keepBLClass", $('#bsLabel').hasClass('text-info'));
          localStorage.removeItem("keepTSClass");
        }
      });
    });

    function keepClassy() {
      if(localStorage.getItem("keepBLClass")) {
        $('#toggle-event').bootstrapToggle('off')
        $("#blLabel").removeClass('text-muted').addClass('text-info');
        $("#tsLabel").removeClass('text-danger').addClass('text-muted');
      } else if(localStorage.getItem("keepTSClass")) {
        $('#toggle-event').bootstrapToggle('on')
        $("#tsLabel").removeClass('text-muted').addClass('text-danger');
        $("#blLabel").removeClass('text-info').addClass('text-muted');
      } else {
        $('#toggle-event').bootstrapToggle('on')
        $("#tsLabel").removeClass('text-muted').addClass('text-danger');
      }
    }

    $('#visual a[href="#visual"]').tab('show'); // Select tab by name
    $('#raw a[href="#raw"]').tab('show'); // Select tab by name

    // Custom classes for device title alert pannel
    $('form#device-search-form').on('submit',function() {
      let toggleIdValue = $('#toggle-event').is(":checked");
      let searchDeviceInput = $("input[name='dweetName']");
    });

    // Moment.js
    // let momentTimestamp = moment({{device.created}}).format("MMMM Do YYYY, h:mm:ss a")
    // $('#deviceTimestamp').text(`Last updated on ${momentTimestamp}`);
  });
</script>
